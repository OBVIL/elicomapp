<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" trimDirectiveWhitespaces="true"%>
<%-- Jsp prelude for elicom, will be include to all jsp by a web.xml conf --%>
<%@ taglib prefix="tag" tagdir="/WEB-INF/tags" %>

<%@ page import="java.io.IOException"%>
<%@ page import="java.nio.file.*"%>
<%@ page import="java.text.*"%>
<%@ page import="java.util.*"%>
<%@ page import="java.util.regex.*" %>

<%@ page import="org.apache.lucene.analysis.Analyzer"%>
<%@ page import="org.apache.lucene.document.*"%>
<%@ page import="org.apache.lucene.index.IndexReader"%>
<%@ page import="org.apache.lucene.index.Term"%>
<%@ page import="org.apache.lucene.search.*"%>
<%@ page import="org.apache.lucene.search.BooleanClause.Occur"%>
<%@ page import="org.apache.lucene.util.BitSet"%>
<%@ page import="org.apache.lucene.util.FixedBitSet"%>

<%@ page import="org.json.*" %>

<%@ page import="alix.fr.Tag" %>
<%@ page import="alix.fr.Tag.TagFilter" %>
<%@ page import="alix.lucene.Alix" %>
<%@ page import="alix.lucene.search.*" %>

<%@ page import="alix.Names" %>
<%@ page import="alix.util.*" %>
<%@ page import="alix.web.*" %>
<%@ page import="alix.web.Error" %>

<%!
/** Load bases from WEB-INF/, one time */
static {
    if (!Webinf.bases) {
        Webinf.bases();
    }
}
/** field name for a letter actor */
final static String CORRES = "corres";
/** Corres from one side*/
final static String CORRES1 = "corres1";
/** Corres from other side*/
final static String CORRES2 = "corres2";

/** Name of int field for date */
final static String DATE = "date";
/** http param for first date of a date query */
final static String DATE1 = "date1";
/** http param for second date of a date query */
final static String DATE2 = "date2";

/** http param for a field */
final static String F = "f";
/** http param word query */
final static String Q = "q";
/** field name for a letter receiver */
final static String RECEIVER = "receiver";
/** field name for a letter sender */
final static String SENDER = "sender";
/** field name for text content */
final String TEXT = "text";
/** Name of int field for date */
final static String YEAR = "year";
/** http param for first date of a date query */
final static String YEAR1 = "year1";
/** http param for second date of a date query */
final static String YEAR2 = "year2";

/**
 * For graphs, color of words
 */
public String color(int tag)
{
    String color = "rgba(255, 255, 255, 1)";
    if (Tag.SUB.sameParent(tag)) color = "rgba(32, 32, 32, 0.8)";
    else if (Tag.ADJ.sameParent(tag)) color = "rgba(32, 128, 32, 0.8)";
    else if (Tag.NAME.sameParent(tag)) color = "rgba(255, 192, 0, 1)";
    else if (Tag.VERB.flag == tag) color = "rgba(255, 255, 255, 0.9)";
    // else if (Tag.isAdj(tag)) color = "rgba(255, 128, 0, 1)";
    else color = "rgba(66, 66, 160, 0.9)";
    return color;

}
 

/**
 * Optimize Boolean Query
 */
public Query rewrite(BooleanQuery query)
{
    if (query.clauses().size() < 1) {
        return null;
    }
    else if (query.clauses().size() == 1) {
        return query.clauses().get(0).getQuery();
    }
    return query;
}

/**
 * 
 */
public Query dateQuery(String field, String date1, String date2)
{
    int d1 = FieldInt.date2int(date1);
    int d2 = FieldInt.date2int(date2);
    if (d2 < d1) d2 = Integer.MIN_VALUE;
    if (d1 == Integer.MIN_VALUE) return null;
    if (d2 == Integer.MIN_VALUE) {
        // only one date
        d2 = FieldInt.yearCeil(d1);
        if (d2 == d1) return IntPoint.newExactQuery(field, d1);
        return IntPoint.newRangeQuery(field, d1, d2);
    }
    return IntPoint.newRangeQuery(field, d1, FieldInt.yearCeil(d2));
}

public Query qYear(Alix alix, JspTools tools) throws IOException
{
    int year1 = tools.getInt(YEAR1, Integer.MIN_VALUE);
    int year2 = tools.getInt(YEAR2, Integer.MIN_VALUE);
    if (year1 == Integer.MIN_VALUE && year2 == Integer.MIN_VALUE) return null;
    else if (year1 == Integer.MIN_VALUE) year1 = year2;
    else if (year2 == Integer.MIN_VALUE) year2 = year1;

    FieldInt fyear = alix.fieldInt(YEAR);
    if (year1 < fyear.min()) year1 = fyear.min();
    if (year2 > fyear.max()) year2 = fyear.max();
    if (year2 < year1) year2 = year1;
    // no range query if full span
    if (year1 == fyear.min() && year2 == fyear.max()) return null;
    return IntPoint.newRangeQuery(YEAR, year1, year2);
}

public Query corresQuery(Alix alix, JspTools tools) throws IOException
{
    final Set<Integer> corres1 = tools.getIntSet(CORRES1);
    final Set<Integer> corres2 = tools.getIntSet(CORRES2);
    if (corres1.size() < 1 && corres2.size() < 1) {
        return null;
    }
    final FieldFacet corresFacet = alix.fieldFacet(CORRES);
    BooleanQuery.Builder corrBuilder = new BooleanQuery.Builder();
    final List<String> c1Forms = new ArrayList<>(corres1.size());
    for (int formId: corres1) {
        String form = corresFacet.form(formId);
        if (form == null) continue;
        c1Forms.add(form);
    }
    final List<String> c2Forms = new ArrayList<>(corres2.size());
    for (int formId: corres2) {
        String form = corresFacet.form(formId);
        if (form == null) continue;
        c2Forms.add(form);
    }
    BooleanQuery.Builder builder = new BooleanQuery.Builder();
    
    Query q;
    BooleanQuery.Builder b;
    
    b = new BooleanQuery.Builder();
    q = orQ(SENDER, c1Forms);
    if (q != null) b.add(q, Occur.MUST);
    q = orQ(RECEIVER, c2Forms);
    if (q != null) b.add(q, Occur.MUST);
    q = rewrite(b.build());
    if (q != null) builder.add(q, Occur.SHOULD);
    
    b = new BooleanQuery.Builder();
    q = orQ(RECEIVER, c1Forms);
    if (q != null) b.add(q, Occur.MUST);
    q = orQ(SENDER, c2Forms);
    if (q != null) b.add(q, Occur.MUST);
    q = rewrite(b.build());
    if (q != null) builder.add(q, Occur.SHOULD);

    return rewrite(builder.build());
}

/**
 * Build a sender / receiver query
 */
public Query srQuery(Alix alix, JspTools tools) throws IOException
{
    final Set<Integer> senderIds = tools.getIntSet(SENDER);
    final Set<Integer> receiverIds = tools.getIntSet(RECEIVER);
    if (senderIds.size() < 1 && receiverIds.size() < 1) {
        return null;
    }
    final FieldFacet senderFacet = alix.fieldFacet(SENDER);
    final FieldFacet receiverFacet = alix.fieldFacet(RECEIVER);
    
    BooleanQuery.Builder builder = new BooleanQuery.Builder();
    
    boolean sended = false;
    boolean received = false;
    String form;
    for (int senderId: senderIds) {
        form = senderFacet.form(senderId);
        if (form == null) continue;
        sended = true;
        received = false;
        Query senderQ = new TermQuery(new Term(SENDER, form));
        for (int receiverId: receiverIds) {
            form = receiverFacet.form(receiverId);
            if (form == null) continue;
            received = true; // has one receiver
            builder.add(
                new BooleanQuery.Builder()
                   .add(senderQ, Occur.MUST)
                   .add(new TermQuery(new Term(RECEIVER, form)), Occur.MUST)
                .build(), Occur.SHOULD
            );
        }
        if (!received) builder.add(senderQ, Occur.SHOULD);
    }
    if (sended) {
        return rewrite(builder.build());
    }
    // loop only on receiver
    received = false;
    for (int receiverId: receiverIds) {
        form = receiverFacet.form(receiverId);
        if (form == null) continue;
        received = true; // has one receiver
        builder.add(new TermQuery(new Term(RECEIVER, form)), Occur.SHOULD);
    }
    return rewrite(builder.build());
}

private Query orQ(String field, List<String> values) {
    BooleanQuery.Builder b = new BooleanQuery.Builder();
    for (String form: values) b.add(new TermQuery(new Term(field, form)), Occur.SHOULD);
    Query q = rewrite(b.build());
    return q;
}

 /**
 * Centralized build of a query fron request params
 */
public Query query(Alix alix, JspTools tools, Set<String> pars) throws IOException
{
    // get a doc filter 
    BitSet filter = null;
    int clauses = 0;
    BooleanQuery.Builder qbuild = new BooleanQuery.Builder();

    
    
    if (pars.contains(CORRES1) && pars.contains(CORRES2)) {
        Query q = corresQuery(alix, tools);
        if (q != null) qbuild.add(q, Occur.MUST);
    }
    // sender - receiver
    if (pars.contains(SENDER) && pars.contains(RECEIVER)) {
        Query q = srQuery(alix, tools);
        if (q != null) qbuild.add(q, Occur.MUST);
    }
    
    // dates
    if (pars.contains(DATE) || pars.contains(DATE1) || pars.contains(DATE2)) {
        Query query = dateQuery(DATE, tools.request().getParameter(DATE1), tools.request().getParameter(DATE2));
        if (query != null) qbuild.add(query, Occur.MUST);
    }
    
    // years
    if (pars.contains(YEAR1) && pars.contains(YEAR2)) {
        Query query = qYear(alix, tools);
        if (query != null) qbuild.add(query, Occur.MUST);
    }
    
    // query words
    if (pars.contains(Q)) {
        Query qword = alix.query( "text", tools.request().getParameter(Q));
        if (qword != null) {
            qbuild.add(qword, Occur.MUST);
        }
    }
    // TODO date ?
    Query query = rewrite(qbuild.build());
    return query;
}

/**
 * Get a bitset document filter by query
 */
public BitSet filter(final Alix alix, final Query query) throws IOException
{
    if (query == null) return null;
    IndexSearcher searcher = alix.searcher();
    CollectorBits qbits = new CollectorBits(searcher);
    searcher.search(query, qbits);
    return qbits.bits();
}

/** 
 * Get an alix instance
 */
public Alix alix(JspTools tools, StringBuilder html) throws IOException
{
    //test if Alix available with at least on base
    if (Alix.pool.size() < 1) {
        if (html != null) {
            html.append(Error.BASE_NONE.html() + "\n");
        }
        else {
            tools.out.println("{\"errors\":" + Error.BASE_NONE.json() + "}");
        }
        tools.response.setStatus(Error.BASE_NONE.status());
        return null;
    }
    final String BASE = "base";
    Alix alix = (Alix) tools.getMap(BASE, Alix.pool, null, "alix.base");
    String baseName = tools.request().getParameter(BASE);
    if (alix == null && baseName != null) {
        if (html != null) {
            html.append(Error.BASE_NOTFOUND.html(BASE, baseName));
        }
        else {
            tools.out.println("{\"errors\":" + Error.BASE_NOTFOUND.json(BASE, baseName) + "}");
        }
        tools.response.setStatus(Error.BASE_NOTFOUND.status());
        return null;
    }
    else if (alix == null) {
        baseName = (String) Alix.pool.keySet().toArray()[0];
        alix = Alix.pool.get(baseName);
    }
    return alix;
}

/**
 * DEPRECATED
 * Carry multiple parameters accross pages and  
 */
public class Pars {
    String q; // word query
    String f; // a possible field name (lemma or forms)
    int start; // start record in search results
    int limit; // a linit in a list of records
    int left; // coocs, left context in words
    int right; // coocs, right context in words
    
    // not verified
    OptionCat cat; // word categories to filter
    OptionOrder order;// order in list of terms and facets
    int dist; // wordnet, context width in words
    int nodes; // number of nodes in wordnet
    boolean expression; // kwic, filter multi word expression
    // too much scoring algo
    OptionDistrib distrib; // ranking algorithm, tf-idf like
    OptionMI mi; // proba kind of scoring, not tf-idf, [2, 2]

    String href;
    String[] forms;
    OptionSort sort;

}


%>
<%
{ // enclose to limit variable scope
    String hrefHome = "";
    String path = (String)request.getAttribute("path");
    if (path == null) {
        path = request.getRequestURI();
        String context = request.getContextPath();
        int pos = path.indexOf(context);
        if (pos >= 0) {
            path = path.substring(pos + context.length());
        }
        request.setAttribute("path", path);
    }
    for (int i = 1, len = path.length(); i < len; i++) {
        if (path.charAt(i) == '/') {
            hrefHome += "../";
        }
    }
    request.setAttribute("hrefHome", hrefHome);
}

%>