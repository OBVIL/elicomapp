<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" trimDirectiveWhitespaces="true"%>
<%-- Jsp prelude for elicom, will be include to all jsp by a web.xml conf --%>
<%@taglib prefix="t" tagdir="/WEB-INF/tags" %>

<%@ page import="java.text.*"%>
<%@ page import="java.util.*"%>
<%@ page import="java.util.regex.*" %>
<%@ page import="java.io.IOException"%>

<%@ page import="org.apache.lucene.analysis.Analyzer"%>
<%@ page import="org.apache.lucene.document.*"%>
<%@ page import="org.apache.lucene.index.IndexReader"%>
<%@ page import="org.apache.lucene.index.Term"%>
<%@ page import="org.apache.lucene.search.*"%>
<%@ page import="org.apache.lucene.search.BooleanClause.Occur"%>
<%@ page import="org.apache.lucene.util.BitSet"%>

<%@ page import="org.json.*" %>

<%@ page import="alix.fr.Tag" %>
<%@ page import="alix.fr.Tag.TagFilter" %>
<%@ page import="alix.lucene.Alix" %>
<%@ page import="alix.lucene.search.*" %>

<%@ page import="alix.Names" %>
<%@ page import="alix.util.*" %>
<%@ page import="alix.web.*" %>
<%@ page import="alix.web.Error" %>

<%!
/** Load bases from WEB-INF/, one time */
static {
    if (!Webinf.bases) {
        Webinf.bases();
    }
}

/** Name of int field for date */
final static String DATE = "date";
/** http param for first date of a date query */
final static String DATE1 = "date1";
/** http param for second date of a date query */
final static String DATE2 = "date2";
/** http param for a field */
final static String F = "f";
/** http param word query */
final static String Q = "q";
/** field name for a letter receiver */
final static String RECEIVER = "receiver";
/** field name for a letter sender */
final static String SENDER = "sender";
/** field name for text content */
final String TEXT = "text";
/** Set of http param from which build a query for graphs */
final static Set<String> GRAPH_PARS = Set.of(SENDER, RECEIVER, DATE);

/**
 * For graphs, color of words
 */
public String color(int tag)
{
    String color = "rgba(255, 255, 255, 1)";
    if (Tag.SUB.sameParent(tag)) color = "rgba(32, 32, 32, 0.8)";
    else if (Tag.ADJ.sameParent(tag)) color = "rgba(32, 128, 32, 0.8)";
    else if (Tag.NAME.sameParent(tag)) color = "rgba(255, 192, 0, 1)";
    else if (Tag.VERB.flag == tag) color = "rgba(255, 255, 255, 0.9)";
    // else if (Tag.isAdj(tag)) color = "rgba(255, 128, 0, 1)";
    else color = "rgba(66, 66, 160, 0.9)";
    return color;

}
/**
 * 17530301 -> 1753-03-01
 * 17530000 -> 1753
 */
public String int2date(int value) {
    String date = "" + value;
    date = date.substring(0, 4) + "-" + date.substring(4, 6) + "-" + date.substring(6, 8);
    date = date.replaceFirst("\\-00.*$", "");
    return date;
}

/**
 * 1753 -> 17530000
 * 1753-03-01 -> 17530301
 */
public int date2int(String date) {
    int value = Integer.MIN_VALUE;
    if (date == null) return value;
    date = date.trim();
    if (!date.matches("-?\\d{1,4}(-\\d\\d)?(-\\d\\d)?")) return value;
    boolean negative = false;
    if (date.charAt(0) == '-') {
        negative = true;
        date = date.substring(1);
    }
    // get year, maybe negative
    String[] parts = date.split("-");
    try {
        int v = Integer.parseInt(parts[0]);
        value = v * 10000;
    }
    catch (Exception e) {
        return value;
    }
    if (parts.length > 1) {
       try {
             int v = Integer.parseInt(parts[1]);
             value += v * 100;
         }
         catch (Exception e) {
             return value;
         }
    }
    if (parts.length > 2) {
        try {
             int v = Integer.parseInt(parts[2]);
             value += v;
        }
        catch (Exception e) {
           return value;
        }
    }
    if (negative) return -value;
    return value;
}
 
/**
 * 17530000 -> 17539999
 */
public int upperDate(int date)
{
    if (date % 10000 == 0) return date + 9999;
    if (date % 100 == 0) return date + 99;
    return date;
}

/**
 * 
 */
public Query dateQuery(String field, String date1, String date2)
{
    int d1 = date2int(date1);
    int d2 = date2int(date2);
    if (d2 < d1) d2 = Integer.MIN_VALUE;
    if (d1 == Integer.MIN_VALUE) return null;
    if (d2 == Integer.MIN_VALUE) {
        // only one date
        d2 = upperDate(d1);
        if (d2 == d1) return IntPoint.newExactQuery(field, d1);
        return IntPoint.newRangeQuery(field, d1, d2);
    }
    return IntPoint.newRangeQuery(field, d1, upperDate(d2));
}
 
 /**
 * Centralized build of a query fron request params
 */
public Query query(Alix alix, JspTools tools, Set<String> pars) throws IOException
{
    // get a doc filter 
    BitSet filter = null;
    int clauses = 0;
    BooleanQuery.Builder qbuild = new BooleanQuery.Builder();

    for (String field: new String[]{SENDER, RECEIVER}) {
        if (!pars.contains(field)) continue;
        final Set<Integer> idSet = tools.getIntSet(field+"id");
        if (idSet.size() < 1) continue;
        BooleanQuery.Builder builder = new BooleanQuery.Builder();
        final FieldFacet facet = alix.fieldFacet(field, TEXT);
        for (int i: idSet) {
            String form = facet.form(i);
            if (form == null) continue;
            builder.add(new TermQuery(new Term(field, form)), Occur.SHOULD);
        }
        BooleanQuery query = builder.build();
        if (query.clauses().size() < 1) {
        }
        else if (query.clauses().size() == 1) {
            qbuild.add(query.clauses().get(0).getQuery(), Occur.MUST);
        }
        else  {
            qbuild.add(query, Occur.MUST);
        }
    }
    
    // dates
    if (pars.contains(DATE) || pars.contains(DATE1) || pars.contains(DATE2)) {
        Query query = dateQuery(DATE, tools.request().getParameter(DATE1), tools.request().getParameter(DATE2));
        if (query != null) qbuild.add(query, Occur.MUST);
    }
    
    // query words
    if (pars.contains(Q)) {
        Query qword = alix.query( "text", tools.request().getParameter(Q));
        if (qword != null) {
            qbuild.add(qword, Occur.MUST);
        }
    }
    // TODO date ?
    Query query = qbuild.build();
    if (((BooleanQuery)query).clauses().size() < 1) {
        query = null;
    }
    else if (((BooleanQuery)query).clauses().size() == 1) {
        query = ((BooleanQuery)query).clauses().get(0).getQuery();
    }
    return query;
}

/**
 * Get a bitset document filter by query
 */
public BitSet filter(final Alix alix, final Query query) throws IOException
{
    if (query == null) return null;
    IndexSearcher searcher = alix.searcher();
    CollectorBits qbits = new CollectorBits(searcher);
    searcher.search(query, qbits);
    return qbits.bits();
}

/** 
 * Get an alix instance
 */
public Alix alix(JspTools tools, StringBuilder html) throws IOException
{
    //test if Alix available with at least on base
    if (Alix.pool.size() < 1) {
        if (html != null) {
            html.append(Error.BASE_NONE.html() + "\n");
        }
        else {
            tools.out.println("{\"errors\":" + Error.BASE_NONE.json() + "}");
        }
        tools.response.setStatus(Error.BASE_NONE.status());
        return null;
    }
    final String BASE = "base";
    Alix alix = (Alix) tools.getMap(BASE, Alix.pool, null, "alix.base");
    String baseName = tools.request().getParameter(BASE);
    if (alix == null && baseName != null) {
        if (html != null) {
            html.append(Error.BASE_NOTFOUND.html(BASE, baseName));
        }
        else {
            tools.out.println("{\"errors\":" + Error.BASE_NOTFOUND.json(BASE, baseName) + "}");
        }
        tools.response.setStatus(Error.BASE_NOTFOUND.status());
        return null;
    }
    else if (alix == null) {
        baseName = (String) Alix.pool.keySet().toArray()[0];
        alix = Alix.pool.get(baseName);
    }
    return alix;
}

/**
 * DEPRECATED
 * Carry multiple parameters accross pages and  
 */
public class Pars {
    String q; // word query
    String f; // a possible field name (lemma or forms)
    int start; // start record in search results
    int limit; // a linit in a list of records
    int left; // coocs, left context in words
    int right; // coocs, right context in words
    
    // not verified
    OptionCat cat; // word categories to filter
    OptionOrder order;// order in list of terms and facets
    int dist; // wordnet, context width in words
    int nodes; // number of nodes in wordnet
    boolean expression; // kwic, filter multi word expression
    // too much scoring algo
    OptionDistrib distrib; // ranking algorithm, tf-idf like
    OptionMI mi; // proba kind of scoring, not tf-idf, [2, 2]

    String href;
    String[] forms;
    OptionSort sort;

}


%>
<%
{ // enclose to limit variable scope
    String hrefHome = "";
    String path = (String)request.getAttribute("path");
    if (path == null) {
        path = request.getRequestURI();
        String context = request.getContextPath();
        int pos = path.indexOf(context);
        if (pos >= 0) {
            path = path.substring(pos + context.length());
        }
        request.setAttribute("path", path);
    }
    for (int i = 1, len = path.length(); i < len; i++) {
        if (path.charAt(i) == '/') {
            hrefHome += "../";
        }
    }
    request.setAttribute("hrefHome", hrefHome);
}

%>